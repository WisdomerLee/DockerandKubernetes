개발과 상용 프로그램의 차이가 있고
둘은 환경, 설정이 다름, 컴파일 된 부분도 개발부분에서 있던 코드는 빌드되는 과정에서 최적화가 이루어져 보다 작고 빠르게 움직일 수 있는 함수들로 대체되어 처리됨

docker file에서 cmd로 실행되는 것을 build를 처리하도록 하면 컨테이너는 해당 과정을 빌드만 하는 컨테이너가 탄생함 : 배포할 때 설치판 같은 것

multi-stage build
여러 빌드 단계를 설정, 정의함
하나의 dockerfile을 여러 빌드 설정 단계(stages)
stages는 각각 서로 다른 stages의 결과를 복사해올 수 있음
통짜로 된 image를 빌드하거나 아니면 개별의 stages들을 선택하여 빌드할 수 있음..

Dockerfile.prod라는 파일을 만들고

FROM node:14-alpine

WORKDIR /app

COPY package.json . #코드 종속성 확인

RUN npm install #종속된 기본 환경 설정

COPY . . #코드 복사

CMD ["npm", "run", "build"]

위의 dockerfile이 있다고 했을 때

Dockerfile.prod

FROM node:14-alpine as build

WORKDIR /app

COPY package.json . #코드 종속성 확인

RUN npm install #종속된 기본 환경 설정

COPY . . #코드 복사

RUN rpm run build #실행 빌드만 사용 : 이 과정에서 build폴더가 생성되고 image를 build함

#FROM이 들어가면 dockerfile에서 새 stage를 만듦 : 기존 단계에서 같은 image를 쓰더라도..
FROM nginx:stable-alpine

COPY --from=build /app/build /usr/share/nginx/html #nginx 문서에도 나와있지만 실행을 위해서는 해당 부분의 스크립트만 있어도 실행이 되어 해당 폴더로 복사해두고 실행

EXPOSE 80

CMD ["nginx", "-g", "daemon off;"]


위의 두 단계 빌드 스테이지로 나뉜 도커 파일을 빌드하려면...?

docker build -f frontend/Dockerfile.prod -t "빌드된 이미지 이름" ./frontend
위와 같은 커맨드를 실행하면 Dockerfile.prod 파일의 dockerfile를 기준으로 빌드하고 프로젝트의 /frontend 폴더로 이미지가 빌드 됨

그리고 빌드된 이미지를 docker hub로 보냄
docker push "dockerhub의 repository"

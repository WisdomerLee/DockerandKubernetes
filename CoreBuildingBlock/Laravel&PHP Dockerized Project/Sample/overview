개발 툴의 터미널을 열고

docker-compose.yaml로 지정된 docker-composer 파일 중에 composer 부분만 실행하려면... 아래와 같이
아래의 상황은 컨테이너 종료후 삭제 옵션이 추가
또한 laravel 프로젝트를 컨테이너에서 생성하도록 설정
docker-compose run --rm composer create-project --prefer-dist laravel/laravel .

이 커맨드를 실행하고 /src폴더에 복사된 laravel 프로젝트에서 
.env파일 내부를 보면

DB_CONNECTION=mysql
DB_HOST=127.0.0.1
DB_PORT=3306
DB_DATABASE=
DB_USERNAME=root
DB_PASSWORD=

이 부분에 해당되는 영역이 있는데 위의 내용을 수정하여야 함 : container에서 동작하도록 하려면...
/env/mysql.env에서 설정한 사용자 이름, 패스워드를 같게 만들어 주어야 함

DB_CONNECTION=mysql
DB_HOST=mysql
DB_PORT=3306
DB_DATABASE=homestead
DB_USERNAME=homestead
DB_PASSWORD=secret


만약 터미널에서 docker-compose up으로 실행하면 기본적으로 docker-compose에 있는 모든 service가 실행됨
특정 영역을 제외하고 싶다면...
특정 서비스를 제외한 실행하고 싶은 나머지 서비스를 일일이 넣어야 함...

docker-compose up -d server php mysql
서버, php, mysql만 실행됨
그런데 위와 같은 커맨드로 해당되는 서비스를 모두 일일이 지정하려면 번거로우므로
docker-compose up -d server로 실행하되
docker-compose.yaml파일에서 server쪽에 depends_on:으로 php, mysql을 추가하면
서버만 실행하여도 종속성을 설정해두어 php와 mysql도 같이 실행

그리고 기본적으로 docker는 image가 있으면 image를 다시 생성하여 실행하지 않음
그럼 소스 코드가 변경되어 이미지를 다시 만들어야 할 필요가 있을 땐 이미지를 다시 빌드하도록 composer로 설정할 수 있는데

docker-compose up -d --build  server
위와 같이 실행하면 소스코드를 레이어단으로 비교하여 변경사항이 있으면 변경된 부분부터 다시 이미지를 재구축함
변경사항이 없으면 빌드하지 않음..

커맨드 창으로
docker-compose run --rm artisan migrate

실행하면
데이터베이스가 이동하게 됨...

도커가 관리하는 볼륨이 아닌
개발자가 관리하는 bind mounts

이미지가 한 번 생성되면
소스코드 등을 수정하게 되면 이미지에 반영되지 않으므로 변경 내용은 이미지를 다시 생성하지 않는 이상 반영되지 않음

그럼 개발하는 동안 코드를 수정하고 컨테이너를 모두 종료하고 이미지를 다시 생성하는 과정을 계속 반복...?

bind mounts는 개발자가 정의한 폴더, 경로에 존재함
소스코드를 bind mounts에 넣을 수 있음
그럼 컨테이너가 이를 인식하고 수정사항이 바로 반영됨...

이름을 가진 볼륨은 읽기는 가능하나 수정은 불가능하지만 bind mounts는 읽고 쓸 수 있음

bind mounts는 docker file 내부에서 설정하는 것이 아님
bind mounts는 컨테이너와 연결되는 것, 이미지가 아님!(중요)

docker로 실행할 때
docker run -v "프로젝트 폴더의 절대 경로(상대 경로 아님에 주의)":(workdir에 지정한 폴더 경로) "실행할 이미지 이름"

macos/linux의 경우는 -v $(pwd):/app
windows의 경우는 -v "%cd%":/app
의 형태로 경로의 단축키를 쓸 수 있음

위와 같이 실행하면 해당 절대 경로에 지정된 파일이 수정되면 컨테이너에 즉시 반영됨
만약 프로젝트 폴더의 절대 경로에 공백이 있을 경우엔 절대경로:(폴더 경로) 를 통째로 따옴표로 묶어야 함



docker run -d -p 3000:80 --rm --name feedback-app -v feedback:/app/feedback -v "프로젝트 폴더의 절대 경로(상대 경로 아님에 주의)":/app(workdir에 지정한 폴더 경로) "실행할 이미지 이름"

그런데 이렇게 컨테이너를 실행하면 ...? 또 문제가 발생함...
node를 실행할 때 모듈 종속성을 찾지 못해 실행을 못 하는 문제가 생김

bind mounts로 집어넣은 프로젝트 폴더 내에는 종속성을 가진 모듈이 없음...> 그에 따라 발생한 문제
로컬 설정에서는 npm을 설치하여 실행하지 않았기 때문에 << 로컬 내부에선 해당 모듈 등이 없음

그리고 해당 프로젝트 경로로 하게 되면 이미지로 가져온 모든 설정을 로컬 설정에서 덮어쓰게 되므로...
로컬의 설정이 이미지의 설정을 덮어 씌움 : 시스템에는 아무 영향이 없음!!!

만약 bind mounts와 image의 기본 설정 중 충돌이 나는 부분이 있으면 이미지의 것을 쓰게 할 수 있음

docker file에서 VOLUME ["app/node_modules"]로 지정할 수도 있으나
실행 커맨드로도 할 수 있음
역시 -v로 지정

docker run -d -p 3000:80 --rm --name feedback-app -v feedback:/app/feedback -v "프로젝트 폴더의 절대 경로(상대 경로 아님에 주의)":/app(workdir에 지정한 폴더 경로) -v /app/node_modules "실행할 이미지 이름"

이렇게 설정하면 다시 정상 동작하는데 이 땐 프로젝트 폴더의 내용을 수정하는 즉시 컨테이너 실행에 즉시 반영됨

컨테이너가 실행 중일 때 소스코드를 수정하고 다시 그 소스코드 변경사항이 반영되려면
컨테이너를 끝내고 
컨테이너를 새로 다시 시작하여야 변경된 내용이 반영됨

node의 module의 경우
package.json에
"devependencies":{
  "nodemon": "최신 버전"
}
를 추가하고
"scripts":{
  "start":"nodemon server.js"
}
를 추가함

dockerfile에서
CMD ["npm", "start"]

nodemon은 node의 스크립트 변경을 인지하고 이의 수정사항이 반영되도록 node를 자동으로 재시작하도록 함...

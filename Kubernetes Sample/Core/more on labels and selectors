
deployment.yaml파일 내부에서 다시 시작
---------------------
apiVersion: apps/v1
kind: Deployment 
metadata: 
  name: "이름짓고 싶은 서비스 이름"
  labels:
    group: example
    
spec:
  replicas: 1
  selector:
    #matchLabels:
    #  app: "아래의 Pod 이름과 같을 것"
    #  tier: backend
    matchExpressions:
      - {key: app, operator: In, values: ["컨테이너 이름", "컨테이너 이름"]}
  template:
    metadata:
      labels:
        app: "지을 Pod 이름"
        tier: backend
    spec:
      containers:
        - name: "짓고싶은 컨테이너 이름"
          image: "docker hub의 image : dockerhub id/이미지 이름"
          livenessProbe:
            httpGet:
              path: /
              port: 8080
            periodSeconds: 3
            initialDelaySeconds: 5
---------------------
selector아래의 matchExpressions는 제어할 Pod의 속성을 키, 값이 같은 부분을 통해 정의할 수 있음

metadata의 아래의 labels는 service, deployment.yaml 모두 공통으로 group을 지정하면...

kubectl delete deployments, services -l group=example로 지정하면 해당 그룹의 메타데이터를 가진 속성의 리소스 기반으로 실행중인 것들이 모두 지워짐

livenessProbe: pod, container가 멀쩡히 동작하는지 확인하는 방식을 정의내리는 곳

위의 경우엔 /path를 8080으로 지정하여 처음엔 5초 대기 후 3초마다 반응을 확인하고 반응이 없으면 pod, container를 다시 실행시키도록 할 수 있음

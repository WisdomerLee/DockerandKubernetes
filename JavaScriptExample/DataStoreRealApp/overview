해당 예시 샘플을 image로 build하고 실행하면
소스 코드 상에 피드백을 넣으면 파일로 저장한다고 되어있음
그리하여 소스 코드 상으로 파일이 저장될 로컬 폴더로 이동하면 해당 파일은 보이지 않음
>> container 내부에 소스코드를 통째로 복사하였기에 해당 폴더들도 복사되어 그 복사된 폴더 내에 파일이 생성되는 것
위의 예시에서는 localhost:3000으로 접속하여 /feedback/저장한 파일 이름
으로 접속하여야만 저장된 파일의 내용을 볼 수 있음!!

임시로 컨테이너로 저장한 파일을 컨테이너가 삭제된 뒤에 다시 실행한 뒤에 같은 파일 경로로 접속을 시도하면 없는 파일이라고 뜸
하지만 컨테이너를 삭제하지 않고 멈춘 상태에서 다시 실행하게 되면 같은 파일 경로로 접속이 됨...

컨테이너끼리는 격리되어있기 때문에 각각 저장한 파일들에 다른 컨테이너들이 접근할 수 없음

볼륨이라는 개념이 그래서 등장..!

볼륨이 무엇인가??
컨테이너가 접근 가능한 드라이브 공간
즉 해당 공간에 대한 경로를 컨테이너마다 모두 똑같이 복사하게 하여 해당 경로에 파일을 읽고 쓰게 만들면...?
볼륨에서 데이터를 읽고 쓸 수 있게 됨
볼륨에 저장된 것은 드라이브 공간에 저장되기 때문에 컨테이너가 사라져도 남아있게 됨

그렇다면 컨테이너에 볼륨을 어떻게 지정할 수 있는가?

dockerfile내에
예시의 공간은 WORKDIR이 /app이고
또한 저장되어야 할 파일이 있는 폴더는 feedback이므로
해당 컨테이너 내부의 파일 경로는 /app/feedback이 됨

VOLUME ["/app/feedback"]
이라는 줄을 하나 추가

이미지를 빌드하고
docker build -t feedback-node:volumes .
이미지를 실행한 뒤에
docker run -d -p 3000:80 --rm --name feedback-app feedback-node:volumes

위와 같이 실행하여 localhost:3000으로 접속하여 같은 이름으로 파일을 저장을 시도하면...!?
파일을 rename하는 소스코드는 다중 파일 접근에서 허용되지 않는 메서드

소스코드 server.js파일을 수정하고(주석 처리됨)
다시 실행해보면??
볼륨에 파일이 보이지 않음...?
